trigger:
  branches:
    include:
    - master

schedules:
  - cron: "0 0,12 * * *"
    always: true
    displayName: Reset DNS Every 12 Hours
    branches:
      include:
      - master

name: 1.0.$(BuildID)

variables:
  - group: keyvault_variables

stages:

- stage: build
  jobs:

  - job: check_and_preview
    displayName: 'Run DNSControl check and preview'
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - task: replacetokens@3
      displayName: 'Replace variables in files'
      inputs:
        targetFiles: |
          creds.json
          dnsconfig.js
        encoding: 'auto'
        writeBOM: true
        actionOnMissing: 'fail'
        keepToken: false
        tokenPrefix: '#{'
        tokenSuffix: '}#'
    - task: Docker@1
      displayName: 'Run DNSControl Check'
      inputs:
        containerregistrytype: 'Container Registry'
        command: 'Run an image'
        imageName: stackexchange/dnscontrol
        qualifyImageName: false
        volumes: '$(System.DefaultWorkingDirectory)/:/dns'
        containerCommand: 'dnscontrol check'
        runInBackground: false
    - task: Docker@1
      displayName: 'Run DNSControl Preview'
      inputs:
        containerregistrytype: 'Container Registry'
        command: 'Run an image'
        imageName: stackexchange/dnscontrol
        qualifyImageName: false
        volumes: '$(System.DefaultWorkingDirectory)/:/dns'
        containerCommand: 'dnscontrol preview'
        runInBackground: false

- stage: release
  dependsOn: build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  jobs:
  - deployment: DeployProduction
    displayName: 'Run DNSControl push'
    pool:
      vmImage: ubuntu-latest
    environment: 'DNS Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            persistCredentials: true
            clean: true
          - task: replacetokens@3
            displayName: 'Replace variables in files'
            inputs:
              targetFiles: |
                creds.json
                dnsconfig.js
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'fail'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
          - task: Docker@1
            displayName: 'Run DNSControl push'
            inputs:
              containerregistrytype: 'Container Registry'
              command: 'Run an image'
              imageName: stackexchange/dnscontrol
              qualifyImageName: false
              volumes: '$(System.DefaultWorkingDirectory)/:/dns'
              containerCommand: 'dnscontrol push'
              runInBackground: false
          - powershell: |
              if (test-path "$(System.DefaultWorkingDirectory)/spfcache.updated.json") {
                move-item "$(System.DefaultWorkingDirectory)/spfcache.updated.json" "$(System.DefaultWorkingDirectory)/DNSControl/spfcache.json" -Force
                git config user.email "$(email)"
                git config user.name "$(name)"
                git add spfcache.json
                git commit -m "Updated spfcache.json ***NO_CI***"
                if (('$(Build.Repository.Uri)').contains('github')) {
                  # If GitHub, need PAT etc
                  git push https://$(Github-pat)@github.com/$(Github-org)/$(Github-repo).git HEAD:master
                } else {
                  git push origin HEAD:master
                }
              }
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            displayName: 'Commit spfcache.json back'
          - powershell: |
              git tag v$(Build.BuildNumber)
              if (('$(Build.Repository.Uri)').contains('github')) {
                # If GitHub, need PAT etc
                git push https://$(Github-pat)@github.com/$(Github-org)/$(Github-repo).git HEAD:master
              } else {
                git push origin HEAD:master
              }
            workingDirectory: $(Build.SourcesDirectory)
            displayName: 'Tag Release Number'
            condition: and(succeeded(), ne(variables['Build.Reason'], 'Schedule'))